#!/bin/bash

# This script takes a Python source directory and a target directory,
# and generates packaging metadata in the target directory.  This information
# gets fed into the build-packages.sh script to generate Linux packages.
# The script uses the setup.py file to extract the relevant information,
# and uses values from defaults.sh if some information cannot be determined.

# The script must be run in the top-level packaging source directory.

REPO_DIR="$1"
PKG_DIR="$2"
PKG_METADATA="./pkg-metadata"
PKG_NAME="$(basename "$REPO_DIR")"

set -u

if [ -z "$REPO_DIR" ] || [ -z "$PKG_DIR" ]; then 
   echo >&2 "Usage: $0 REPO_DIR PKG_DIR"
   exit 1
fi

if ! [ -f "$REPO_DIR/setup.py" ]; then 
   echo >&2 "FATAL: Directory $REPO_DIR does not have a setup.py file"
   exit 1
fi

# generate each piece of metadata 
if ! [ -d "$PKG_METADATA/$PKG_NAME" ]; then 
   echo >&2 "FATAL: missing $PKG_METADATA/$PKG_NAME/"
   exit 1
fi

mkdir -p "$PKG_DIR"

# Some files can't be autogenerated by setup.py, so supply them directly.
for MD_FILE in "arch.txt" "deps-deb.txt" "maintainer.txt"; do

    if ! [ -f "$PKG_METADATA/$PKG_NAME/$MD_FILE" ]; then 
        echo >&2 "FATAL: missing $PKG_METADATA/$PKG_NAME/$MD_FILE"
        exit 1
    fi

    cp "$PKG_METADATA/$PKG_NAME/$MD_FILE" "$PKG_DIR/$MD_FILE"
done

# generate the rest from the setup.py, unless specifically overridden 
for MD in "license" "version" "name" "url" "description"; do 

   if [ -f "$PKG_METADATA/$PKG_NAME/$MD.txt" ]; then 
      cp "$PKG_METADATA/$PKG_NAME/$MD.txt" "$PKG_DIR/$MD.txt"
   else
      pushd "$REPO_DIR" >/dev/null
      DAT="$(python ./setup.py --${MD})"
      popd >/dev/null

      if [ "$DAT" = "UNKNOWN" ]; then 
          echo >&2 "FATAL: unknown $MD must be overridden (Hint: put it in $PKG_METADATA/$PKG_NAME/$MD.txt)"
          exit 1
      fi

      echo "$DAT" > "$PKG_DIR/$MD.txt"
   fi
done

exit 0

